"use strict";exports.id=420,exports.ids=[420],exports.modules={420:(e,t,r)=>{r.r(t),r.d(t,{default:()=>u});var n=r(185),s=r.n(n),c=r(142);r.n(c)().config();const o=`mongodb+srv://${process.env.DATABASE_MONGODB_USER}:${process.env.DATABASE_MONGODB_PASSWORD}@cluster0.zdu2a1t.mongodb.net/${process.env.DATABASE_MONGODB_NAME}?retryWrites=true&w=majority`;process.env.DATABASE;const i=(process.env.DATABASE,o),d=new(s().Schema)({nombre:{type:String,required:!0},descripcion:{type:String,required:!0},codigo:{type:String,required:!0},foto:{type:String,required:!0},precio:{type:String,required:!0},stock:{type:String,required:!0}},{timestamps:!0}),a=s().model("products",d);class u extends class{constructor(e){this.model=e,this.connect()}async connect(){try{return await s().connect(i)}catch(e){throw new Error(`ERROR DE CONEXION + ${e}`)}}async save(e){try{const t=new this.model(e);return await t.save()}catch(e){return!1}}async getById(e){try{return await this.model.findOne({_id:e})||!1}catch(e){return!1}}async getAll(){try{return await this.model.find()||!1}catch(e){return!1}}async deleteById(e){try{const t=await this.model.deleteOne({_id:e});return console.log(t),!!t.deletedCount}catch(e){return!1}}async updateById(e,t){try{const t=await this.model.findOne({_id:e});console.log(t)}catch(e){return!1}}}{constructor(){super(a)}}}};